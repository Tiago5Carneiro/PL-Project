Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    CASE
    CONST
    EQ
    EXCLAMATION
    FILE
    GOTO
    LABEL
    NIL
    PACKED
    PIPE
    SET
    TILDE
    TYPE
    UMINUS
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> header block DOT
Rule 2     header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON
Rule 3     header -> PROGRAM ID SEMICOLON
Rule 4     id_list -> id_list COMMA ID
Rule 5     id_list -> ID
Rule 6     empty -> <empty>
Rule 7     block -> declarations compound_statement
Rule 8     declarations -> declarations variable_declaration
Rule 9     declarations -> declarations function_declaration
Rule 10    declarations -> declarations procedure_declaration
Rule 11    declarations -> empty
Rule 12    variable_declaration -> VAR variable_list SEMICOLON
Rule 13    function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON
Rule 14    procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON
Rule 15    variable_list -> variable_list SEMICOLON variable
Rule 16    variable_list -> variable
Rule 17    variable -> id_list COLON type
Rule 18    type -> ID
Rule 19    type -> INTEGER
Rule 20    type -> REAL
Rule 21    type -> BOOLEAN
Rule 22    type -> CHAR
Rule 23    type -> BYTE
Rule 24    type -> WORD
Rule 25    type -> LONGINT
Rule 26    type -> SHORTINT
Rule 27    type -> SINGLE
Rule 28    type -> DOUBLE
Rule 29    type -> EXTENDED
Rule 30    type -> COMP
Rule 31    type -> CURRENCY
Rule 32    type -> STRING
Rule 33    type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type
Rule 34    type -> RECORD field_list END
Rule 35    field_list -> field_list SEMICOLON field
Rule 36    field_list -> field
Rule 37    field -> id_list COLON type
Rule 38    parameter_list -> LPAREN parameter_section_list RPAREN
Rule 39    parameter_list -> empty
Rule 40    parameter_section_list -> parameter_section_list SEMICOLON parameter_section
Rule 41    parameter_section_list -> parameter_section
Rule 42    parameter_section -> id_list COLON type
Rule 43    parameter_section -> VAR id_list COLON type
Rule 44    compound_statement -> BEGIN statement_list END
Rule 45    statement_list -> statement_list SEMICOLON statement
Rule 46    statement_list -> statement
Rule 47    statement -> assignment_statement
Rule 48    statement -> expression
Rule 49    statement -> compound_statement
Rule 50    statement -> io_statement
Rule 51    statement -> if_statement
Rule 52    statement -> while_statement
Rule 53    statement -> repeat_statement
Rule 54    statement -> for_statement
Rule 55    statement -> empty
Rule 56    assignment_statement -> ID ASSIGN expression
Rule 57    expression -> additive_expression
Rule 58    expression -> expression EQUALS additive_expression
Rule 59    expression -> expression NE additive_expression
Rule 60    expression -> expression LT additive_expression
Rule 61    expression -> expression GT additive_expression
Rule 62    expression -> expression LE additive_expression
Rule 63    expression -> expression GE additive_expression
Rule 64    expression -> expression IN additive_expression
Rule 65    additive_expression -> multiplicative_expression
Rule 66    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 67    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 68    additive_expression -> additive_expression OR multiplicative_expression
Rule 69    additive_expression -> additive_expression ORELSE multiplicative_expression
Rule 70    multiplicative_expression -> factor
Rule 71    multiplicative_expression -> multiplicative_expression TIMES factor
Rule 72    multiplicative_expression -> multiplicative_expression DIVIDE factor
Rule 73    multiplicative_expression -> multiplicative_expression DIV factor
Rule 74    multiplicative_expression -> multiplicative_expression MOD factor
Rule 75    multiplicative_expression -> multiplicative_expression AND factor
Rule 76    multiplicative_expression -> multiplicative_expression ANDTHEN factor
Rule 77    factor -> NUMBER
Rule 78    factor -> STRING
Rule 79    factor -> ID
Rule 80    factor -> LPAREN expression RPAREN
Rule 81    factor -> factor LBRACKET expression RBRACKET
Rule 82    factor -> ID LPAREN expression_list RPAREN
Rule 83    factor -> MINUS factor
Rule 84    factor -> NOT factor
Rule 85    expression_list -> expression_list COMMA expression
Rule 86    expression_list -> expression
Rule 87    expression_list -> empty
Rule 88    io_statement -> WRITE LPAREN expression_list RPAREN
Rule 89    io_statement -> WRITELN LPAREN expression_list RPAREN
Rule 90    io_statement -> READ LPAREN expression_list RPAREN
Rule 91    io_statement -> READLN LPAREN expression_list RPAREN
Rule 92    if_statement -> IF expression THEN statement ELSE statement
Rule 93    if_statement -> IF expression THEN statement
Rule 94    while_statement -> WHILE expression DO statement
Rule 95    repeat_statement -> REPEAT statement_list UNTIL expression
Rule 96    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 97    for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 75
ANDTHEN              : 76
ARRAY                : 33
ASSIGN               : 56 96 97
BEGIN                : 44
BOOLEAN              : 21
BYTE                 : 23
CASE                 : 
CHAR                 : 22
COLON                : 13 17 37 42 43
COMMA                : 4 85
COMP                 : 30
CONST                : 
CURRENCY             : 31
DIV                  : 73
DIVIDE               : 72
DO                   : 94 96 97
DOT                  : 1 33 33
DOUBLE               : 28
DOWNTO               : 97
ELSE                 : 92
END                  : 34 44
EQ                   : 
EQUALS               : 58
EXCLAMATION          : 
EXTENDED             : 29
FILE                 : 
FOR                  : 96 97
FUNCTION             : 13
GE                   : 63
GOTO                 : 
GT                   : 61
ID                   : 2 3 4 5 13 14 18 56 79 82 96 97
IF                   : 92 93
IN                   : 64
INTEGER              : 19
LABEL                : 
LBRACKET             : 33 81
LE                   : 62
LONGINT              : 25
LPAREN               : 2 38 80 82 88 89 90 91
LT                   : 60
MINUS                : 67 83
MOD                  : 74
NE                   : 59
NIL                  : 
NOT                  : 84
NUMBER               : 33 33 77
OF                   : 33
OR                   : 68
ORELSE               : 69
PACKED               : 
PIPE                 : 
PLUS                 : 66
PROCEDURE            : 14
PROGRAM              : 2 3
RBRACKET             : 33 81
READ                 : 90
READLN               : 91
REAL                 : 20
RECORD               : 34
REPEAT               : 95
RPAREN               : 2 38 80 82 88 89 90 91
SEMICOLON            : 2 3 12 13 13 14 14 15 35 40 45
SET                  : 
SHORTINT             : 26
SINGLE               : 27
STRING               : 32 78
THEN                 : 92 93
TILDE                : 
TIMES                : 71
TO                   : 96
TYPE                 : 
UMINUS               : 
UNTIL                : 95
VAR                  : 12 43
WHILE                : 94
WITH                 : 
WORD                 : 24
WRITE                : 88
WRITELN              : 89
error                : 

Nonterminals, with rules where they appear

additive_expression  : 57 58 59 60 61 62 63 64 66 67 68 69
assignment_statement : 47
block                : 1 13 14
compound_statement   : 7 49
declarations         : 7 8 9 10
empty                : 11 39 55 87
expression           : 48 56 58 59 60 61 62 63 64 80 81 85 86 92 93 94 95 96 96 97 97
expression_list      : 82 85 88 89 90 91
factor               : 70 71 72 73 74 75 76 81 83 84
field                : 35 36
field_list           : 34 35
for_statement        : 54
function_declaration : 9
header               : 1
id_list              : 2 4 17 37 42 43
if_statement         : 51
io_statement         : 50
multiplicative_expression : 65 66 67 68 69 71 72 73 74 75 76
parameter_list       : 13 14
parameter_section    : 40 41
parameter_section_list : 38 40
procedure_declaration : 10
program              : 0
repeat_statement     : 53
statement            : 45 46 92 92 93 94 96 97
statement_list       : 44 45 95
type                 : 13 17 33 37 42 43
variable             : 15 16
variable_declaration : 8
variable_list        : 12 15
while_statement      : 52

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header block DOT
    (2) header -> . PROGRAM ID LPAREN id_list RPAREN SEMICOLON
    (3) header -> . PROGRAM ID SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . block DOT
    (7) block -> . declarations compound_statement
    (8) declarations -> . declarations variable_declaration
    (9) declarations -> . declarations function_declaration
    (10) declarations -> . declarations procedure_declaration
    (11) declarations -> . empty
    (6) empty -> .

    BEGIN           reduce using rule 6 (empty -> .)
    VAR             reduce using rule 6 (empty -> .)
    FUNCTION        reduce using rule 6 (empty -> .)
    PROCEDURE       reduce using rule 6 (empty -> .)

    block                          shift and go to state 4
    declarations                   shift and go to state 5
    empty                          shift and go to state 6

state 3

    (2) header -> PROGRAM . ID LPAREN id_list RPAREN SEMICOLON
    (3) header -> PROGRAM . ID SEMICOLON

    ID              shift and go to state 7


state 4

    (1) program -> header block . DOT

    DOT             shift and go to state 8


state 5

    (7) block -> declarations . compound_statement
    (8) declarations -> declarations . variable_declaration
    (9) declarations -> declarations . function_declaration
    (10) declarations -> declarations . procedure_declaration
    (44) compound_statement -> . BEGIN statement_list END
    (12) variable_declaration -> . VAR variable_list SEMICOLON
    (13) function_declaration -> . FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON
    (14) procedure_declaration -> . PROCEDURE ID parameter_list SEMICOLON block SEMICOLON

    BEGIN           shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 15
    PROCEDURE       shift and go to state 16

    compound_statement             shift and go to state 9
    variable_declaration           shift and go to state 10
    function_declaration           shift and go to state 11
    procedure_declaration          shift and go to state 12

state 6

    (11) declarations -> empty .

    BEGIN           reduce using rule 11 (declarations -> empty .)
    VAR             reduce using rule 11 (declarations -> empty .)
    FUNCTION        reduce using rule 11 (declarations -> empty .)
    PROCEDURE       reduce using rule 11 (declarations -> empty .)


state 7

    (2) header -> PROGRAM ID . LPAREN id_list RPAREN SEMICOLON
    (3) header -> PROGRAM ID . SEMICOLON

    LPAREN          shift and go to state 17
    SEMICOLON       shift and go to state 18


state 8

    (1) program -> header block DOT .

    $end            reduce using rule 1 (program -> header block DOT .)


state 9

    (7) block -> declarations compound_statement .

    DOT             reduce using rule 7 (block -> declarations compound_statement .)
    SEMICOLON       reduce using rule 7 (block -> declarations compound_statement .)


state 10

    (8) declarations -> declarations variable_declaration .

    BEGIN           reduce using rule 8 (declarations -> declarations variable_declaration .)
    VAR             reduce using rule 8 (declarations -> declarations variable_declaration .)
    FUNCTION        reduce using rule 8 (declarations -> declarations variable_declaration .)
    PROCEDURE       reduce using rule 8 (declarations -> declarations variable_declaration .)


state 11

    (9) declarations -> declarations function_declaration .

    BEGIN           reduce using rule 9 (declarations -> declarations function_declaration .)
    VAR             reduce using rule 9 (declarations -> declarations function_declaration .)
    FUNCTION        reduce using rule 9 (declarations -> declarations function_declaration .)
    PROCEDURE       reduce using rule 9 (declarations -> declarations function_declaration .)


state 12

    (10) declarations -> declarations procedure_declaration .

    BEGIN           reduce using rule 10 (declarations -> declarations procedure_declaration .)
    VAR             reduce using rule 10 (declarations -> declarations procedure_declaration .)
    FUNCTION        reduce using rule 10 (declarations -> declarations procedure_declaration .)
    PROCEDURE       reduce using rule 10 (declarations -> declarations procedure_declaration .)


state 13

    (44) compound_statement -> BEGIN . statement_list END
    (45) statement_list -> . statement_list SEMICOLON statement
    (46) statement_list -> . statement
    (47) statement -> . assignment_statement
    (48) statement -> . expression
    (49) statement -> . compound_statement
    (50) statement -> . io_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . ID ASSIGN expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (44) compound_statement -> . BEGIN statement_list END
    (88) io_statement -> . WRITE LPAREN expression_list RPAREN
    (89) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (90) io_statement -> . READ LPAREN expression_list RPAREN
    (91) io_statement -> . READLN LPAREN expression_list RPAREN
    (92) if_statement -> . IF expression THEN statement ELSE statement
    (93) if_statement -> . IF expression THEN statement
    (94) while_statement -> . WHILE expression DO statement
    (95) repeat_statement -> . REPEAT statement_list UNTIL expression
    (96) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (97) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    ID              shift and go to state 30
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 32
    WRITELN         shift and go to state 34
    READ            shift and go to state 35
    READLN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    REPEAT          shift and go to state 39
    FOR             shift and go to state 40
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    statement_list                 shift and go to state 19
    statement                      shift and go to state 20
    assignment_statement           shift and go to state 21
    expression                     shift and go to state 22
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    repeat_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    empty                          shift and go to state 29
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 14

    (12) variable_declaration -> VAR . variable_list SEMICOLON
    (15) variable_list -> . variable_list SEMICOLON variable
    (16) variable_list -> . variable
    (17) variable -> . id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    ID              shift and go to state 50

    variable_list                  shift and go to state 47
    variable                       shift and go to state 48
    id_list                        shift and go to state 49

state 15

    (13) function_declaration -> FUNCTION . ID parameter_list COLON type SEMICOLON block SEMICOLON

    ID              shift and go to state 51


state 16

    (14) procedure_declaration -> PROCEDURE . ID parameter_list SEMICOLON block SEMICOLON

    ID              shift and go to state 52


state 17

    (2) header -> PROGRAM ID LPAREN . id_list RPAREN SEMICOLON
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    ID              shift and go to state 50

    id_list                        shift and go to state 53

state 18

    (3) header -> PROGRAM ID SEMICOLON .

    BEGIN           reduce using rule 3 (header -> PROGRAM ID SEMICOLON .)
    VAR             reduce using rule 3 (header -> PROGRAM ID SEMICOLON .)
    FUNCTION        reduce using rule 3 (header -> PROGRAM ID SEMICOLON .)
    PROCEDURE       reduce using rule 3 (header -> PROGRAM ID SEMICOLON .)


state 19

    (44) compound_statement -> BEGIN statement_list . END
    (45) statement_list -> statement_list . SEMICOLON statement

    END             shift and go to state 54
    SEMICOLON       shift and go to state 55


state 20

    (46) statement_list -> statement .

    END             reduce using rule 46 (statement_list -> statement .)
    SEMICOLON       reduce using rule 46 (statement_list -> statement .)
    UNTIL           reduce using rule 46 (statement_list -> statement .)


state 21

    (47) statement -> assignment_statement .

    END             reduce using rule 47 (statement -> assignment_statement .)
    SEMICOLON       reduce using rule 47 (statement -> assignment_statement .)
    UNTIL           reduce using rule 47 (statement -> assignment_statement .)
    ELSE            reduce using rule 47 (statement -> assignment_statement .)


state 22

    (48) statement -> expression .
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    END             reduce using rule 48 (statement -> expression .)
    SEMICOLON       reduce using rule 48 (statement -> expression .)
    UNTIL           reduce using rule 48 (statement -> expression .)
    ELSE            reduce using rule 48 (statement -> expression .)
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 23

    (49) statement -> compound_statement .

    END             reduce using rule 49 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 49 (statement -> compound_statement .)
    UNTIL           reduce using rule 49 (statement -> compound_statement .)
    ELSE            reduce using rule 49 (statement -> compound_statement .)


state 24

    (50) statement -> io_statement .

    END             reduce using rule 50 (statement -> io_statement .)
    SEMICOLON       reduce using rule 50 (statement -> io_statement .)
    UNTIL           reduce using rule 50 (statement -> io_statement .)
    ELSE            reduce using rule 50 (statement -> io_statement .)


state 25

    (51) statement -> if_statement .

    END             reduce using rule 51 (statement -> if_statement .)
    SEMICOLON       reduce using rule 51 (statement -> if_statement .)
    UNTIL           reduce using rule 51 (statement -> if_statement .)
    ELSE            reduce using rule 51 (statement -> if_statement .)


state 26

    (52) statement -> while_statement .

    END             reduce using rule 52 (statement -> while_statement .)
    SEMICOLON       reduce using rule 52 (statement -> while_statement .)
    UNTIL           reduce using rule 52 (statement -> while_statement .)
    ELSE            reduce using rule 52 (statement -> while_statement .)


state 27

    (53) statement -> repeat_statement .

    END             reduce using rule 53 (statement -> repeat_statement .)
    SEMICOLON       reduce using rule 53 (statement -> repeat_statement .)
    UNTIL           reduce using rule 53 (statement -> repeat_statement .)
    ELSE            reduce using rule 53 (statement -> repeat_statement .)


state 28

    (54) statement -> for_statement .

    END             reduce using rule 54 (statement -> for_statement .)
    SEMICOLON       reduce using rule 54 (statement -> for_statement .)
    UNTIL           reduce using rule 54 (statement -> for_statement .)
    ELSE            reduce using rule 54 (statement -> for_statement .)


state 29

    (55) statement -> empty .

    END             reduce using rule 55 (statement -> empty .)
    SEMICOLON       reduce using rule 55 (statement -> empty .)
    UNTIL           reduce using rule 55 (statement -> empty .)
    ELSE            reduce using rule 55 (statement -> empty .)


state 30

    (56) assignment_statement -> ID . ASSIGN expression
    (79) factor -> ID .
    (82) factor -> ID . LPAREN expression_list RPAREN

    ASSIGN          shift and go to state 63
    LBRACKET        reduce using rule 79 (factor -> ID .)
    TIMES           reduce using rule 79 (factor -> ID .)
    DIVIDE          reduce using rule 79 (factor -> ID .)
    DIV             reduce using rule 79 (factor -> ID .)
    MOD             reduce using rule 79 (factor -> ID .)
    AND             reduce using rule 79 (factor -> ID .)
    ANDTHEN         reduce using rule 79 (factor -> ID .)
    PLUS            reduce using rule 79 (factor -> ID .)
    MINUS           reduce using rule 79 (factor -> ID .)
    OR              reduce using rule 79 (factor -> ID .)
    ORELSE          reduce using rule 79 (factor -> ID .)
    EQUALS          reduce using rule 79 (factor -> ID .)
    NE              reduce using rule 79 (factor -> ID .)
    LT              reduce using rule 79 (factor -> ID .)
    GT              reduce using rule 79 (factor -> ID .)
    LE              reduce using rule 79 (factor -> ID .)
    GE              reduce using rule 79 (factor -> ID .)
    IN              reduce using rule 79 (factor -> ID .)
    END             reduce using rule 79 (factor -> ID .)
    SEMICOLON       reduce using rule 79 (factor -> ID .)
    UNTIL           reduce using rule 79 (factor -> ID .)
    ELSE            reduce using rule 79 (factor -> ID .)
    LPAREN          shift and go to state 64


state 31

    (57) expression -> additive_expression .
    (66) additive_expression -> additive_expression . PLUS multiplicative_expression
    (67) additive_expression -> additive_expression . MINUS multiplicative_expression
    (68) additive_expression -> additive_expression . OR multiplicative_expression
    (69) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 57 (expression -> additive_expression .)
    NE              reduce using rule 57 (expression -> additive_expression .)
    LT              reduce using rule 57 (expression -> additive_expression .)
    GT              reduce using rule 57 (expression -> additive_expression .)
    LE              reduce using rule 57 (expression -> additive_expression .)
    GE              reduce using rule 57 (expression -> additive_expression .)
    IN              reduce using rule 57 (expression -> additive_expression .)
    END             reduce using rule 57 (expression -> additive_expression .)
    SEMICOLON       reduce using rule 57 (expression -> additive_expression .)
    RPAREN          reduce using rule 57 (expression -> additive_expression .)
    THEN            reduce using rule 57 (expression -> additive_expression .)
    DO              reduce using rule 57 (expression -> additive_expression .)
    UNTIL           reduce using rule 57 (expression -> additive_expression .)
    ELSE            reduce using rule 57 (expression -> additive_expression .)
    COMMA           reduce using rule 57 (expression -> additive_expression .)
    RBRACKET        reduce using rule 57 (expression -> additive_expression .)
    TO              reduce using rule 57 (expression -> additive_expression .)
    DOWNTO          reduce using rule 57 (expression -> additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 32

    (88) io_statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 69


state 33

    (80) factor -> LPAREN . expression RPAREN
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 70
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 34

    (89) io_statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 72


state 35

    (90) io_statement -> READ . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 73


state 36

    (91) io_statement -> READLN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 74


state 37

    (92) if_statement -> IF . expression THEN statement ELSE statement
    (93) if_statement -> IF . expression THEN statement
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 75
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 38

    (94) while_statement -> WHILE . expression DO statement
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 76
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 39

    (95) repeat_statement -> REPEAT . statement_list UNTIL expression
    (45) statement_list -> . statement_list SEMICOLON statement
    (46) statement_list -> . statement
    (47) statement -> . assignment_statement
    (48) statement -> . expression
    (49) statement -> . compound_statement
    (50) statement -> . io_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . ID ASSIGN expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (44) compound_statement -> . BEGIN statement_list END
    (88) io_statement -> . WRITE LPAREN expression_list RPAREN
    (89) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (90) io_statement -> . READ LPAREN expression_list RPAREN
    (91) io_statement -> . READLN LPAREN expression_list RPAREN
    (92) if_statement -> . IF expression THEN statement ELSE statement
    (93) if_statement -> . IF expression THEN statement
    (94) while_statement -> . WHILE expression DO statement
    (95) repeat_statement -> . REPEAT statement_list UNTIL expression
    (96) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (97) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    ID              shift and go to state 30
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 32
    WRITELN         shift and go to state 34
    READ            shift and go to state 35
    READLN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    REPEAT          shift and go to state 39
    FOR             shift and go to state 40
    UNTIL           reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    statement_list                 shift and go to state 77
    expression                     shift and go to state 22
    statement                      shift and go to state 20
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    repeat_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    empty                          shift and go to state 29
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 40

    (96) for_statement -> FOR . ID ASSIGN expression TO expression DO statement
    (97) for_statement -> FOR . ID ASSIGN expression DOWNTO expression DO statement

    ID              shift and go to state 78


state 41

    (65) additive_expression -> multiplicative_expression .
    (71) multiplicative_expression -> multiplicative_expression . TIMES factor
    (72) multiplicative_expression -> multiplicative_expression . DIVIDE factor
    (73) multiplicative_expression -> multiplicative_expression . DIV factor
    (74) multiplicative_expression -> multiplicative_expression . MOD factor
    (75) multiplicative_expression -> multiplicative_expression . AND factor
    (76) multiplicative_expression -> multiplicative_expression . ANDTHEN factor

    PLUS            reduce using rule 65 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 65 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 65 (additive_expression -> multiplicative_expression .)
    ORELSE          reduce using rule 65 (additive_expression -> multiplicative_expression .)
    EQUALS          reduce using rule 65 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 65 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 65 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 65 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 65 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 65 (additive_expression -> multiplicative_expression .)
    IN              reduce using rule 65 (additive_expression -> multiplicative_expression .)
    END             reduce using rule 65 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 65 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 65 (additive_expression -> multiplicative_expression .)
    THEN            reduce using rule 65 (additive_expression -> multiplicative_expression .)
    DO              reduce using rule 65 (additive_expression -> multiplicative_expression .)
    UNTIL           reduce using rule 65 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 65 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 65 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 65 (additive_expression -> multiplicative_expression .)
    TO              reduce using rule 65 (additive_expression -> multiplicative_expression .)
    DOWNTO          reduce using rule 65 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    DIV             shift and go to state 81
    MOD             shift and go to state 82
    AND             shift and go to state 83
    ANDTHEN         shift and go to state 84


state 42

    (83) factor -> MINUS . factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    factor                         shift and go to state 85

state 43

    (70) multiplicative_expression -> factor .
    (81) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 70 (multiplicative_expression -> factor .)
    DIVIDE          reduce using rule 70 (multiplicative_expression -> factor .)
    DIV             reduce using rule 70 (multiplicative_expression -> factor .)
    MOD             reduce using rule 70 (multiplicative_expression -> factor .)
    AND             reduce using rule 70 (multiplicative_expression -> factor .)
    ANDTHEN         reduce using rule 70 (multiplicative_expression -> factor .)
    PLUS            reduce using rule 70 (multiplicative_expression -> factor .)
    MINUS           reduce using rule 70 (multiplicative_expression -> factor .)
    OR              reduce using rule 70 (multiplicative_expression -> factor .)
    ORELSE          reduce using rule 70 (multiplicative_expression -> factor .)
    EQUALS          reduce using rule 70 (multiplicative_expression -> factor .)
    NE              reduce using rule 70 (multiplicative_expression -> factor .)
    LT              reduce using rule 70 (multiplicative_expression -> factor .)
    GT              reduce using rule 70 (multiplicative_expression -> factor .)
    LE              reduce using rule 70 (multiplicative_expression -> factor .)
    GE              reduce using rule 70 (multiplicative_expression -> factor .)
    IN              reduce using rule 70 (multiplicative_expression -> factor .)
    END             reduce using rule 70 (multiplicative_expression -> factor .)
    SEMICOLON       reduce using rule 70 (multiplicative_expression -> factor .)
    RPAREN          reduce using rule 70 (multiplicative_expression -> factor .)
    THEN            reduce using rule 70 (multiplicative_expression -> factor .)
    DO              reduce using rule 70 (multiplicative_expression -> factor .)
    UNTIL           reduce using rule 70 (multiplicative_expression -> factor .)
    ELSE            reduce using rule 70 (multiplicative_expression -> factor .)
    COMMA           reduce using rule 70 (multiplicative_expression -> factor .)
    RBRACKET        reduce using rule 70 (multiplicative_expression -> factor .)
    TO              reduce using rule 70 (multiplicative_expression -> factor .)
    DOWNTO          reduce using rule 70 (multiplicative_expression -> factor .)
    LBRACKET        shift and go to state 86


state 44

    (77) factor -> NUMBER .

    LBRACKET        reduce using rule 77 (factor -> NUMBER .)
    TIMES           reduce using rule 77 (factor -> NUMBER .)
    DIVIDE          reduce using rule 77 (factor -> NUMBER .)
    DIV             reduce using rule 77 (factor -> NUMBER .)
    MOD             reduce using rule 77 (factor -> NUMBER .)
    AND             reduce using rule 77 (factor -> NUMBER .)
    ANDTHEN         reduce using rule 77 (factor -> NUMBER .)
    PLUS            reduce using rule 77 (factor -> NUMBER .)
    MINUS           reduce using rule 77 (factor -> NUMBER .)
    OR              reduce using rule 77 (factor -> NUMBER .)
    ORELSE          reduce using rule 77 (factor -> NUMBER .)
    EQUALS          reduce using rule 77 (factor -> NUMBER .)
    NE              reduce using rule 77 (factor -> NUMBER .)
    LT              reduce using rule 77 (factor -> NUMBER .)
    GT              reduce using rule 77 (factor -> NUMBER .)
    LE              reduce using rule 77 (factor -> NUMBER .)
    GE              reduce using rule 77 (factor -> NUMBER .)
    IN              reduce using rule 77 (factor -> NUMBER .)
    END             reduce using rule 77 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 77 (factor -> NUMBER .)
    RPAREN          reduce using rule 77 (factor -> NUMBER .)
    THEN            reduce using rule 77 (factor -> NUMBER .)
    DO              reduce using rule 77 (factor -> NUMBER .)
    UNTIL           reduce using rule 77 (factor -> NUMBER .)
    ELSE            reduce using rule 77 (factor -> NUMBER .)
    COMMA           reduce using rule 77 (factor -> NUMBER .)
    RBRACKET        reduce using rule 77 (factor -> NUMBER .)
    TO              reduce using rule 77 (factor -> NUMBER .)
    DOWNTO          reduce using rule 77 (factor -> NUMBER .)


state 45

    (78) factor -> STRING .

    LBRACKET        reduce using rule 78 (factor -> STRING .)
    TIMES           reduce using rule 78 (factor -> STRING .)
    DIVIDE          reduce using rule 78 (factor -> STRING .)
    DIV             reduce using rule 78 (factor -> STRING .)
    MOD             reduce using rule 78 (factor -> STRING .)
    AND             reduce using rule 78 (factor -> STRING .)
    ANDTHEN         reduce using rule 78 (factor -> STRING .)
    PLUS            reduce using rule 78 (factor -> STRING .)
    MINUS           reduce using rule 78 (factor -> STRING .)
    OR              reduce using rule 78 (factor -> STRING .)
    ORELSE          reduce using rule 78 (factor -> STRING .)
    EQUALS          reduce using rule 78 (factor -> STRING .)
    NE              reduce using rule 78 (factor -> STRING .)
    LT              reduce using rule 78 (factor -> STRING .)
    GT              reduce using rule 78 (factor -> STRING .)
    LE              reduce using rule 78 (factor -> STRING .)
    GE              reduce using rule 78 (factor -> STRING .)
    IN              reduce using rule 78 (factor -> STRING .)
    END             reduce using rule 78 (factor -> STRING .)
    SEMICOLON       reduce using rule 78 (factor -> STRING .)
    RPAREN          reduce using rule 78 (factor -> STRING .)
    THEN            reduce using rule 78 (factor -> STRING .)
    DO              reduce using rule 78 (factor -> STRING .)
    UNTIL           reduce using rule 78 (factor -> STRING .)
    ELSE            reduce using rule 78 (factor -> STRING .)
    COMMA           reduce using rule 78 (factor -> STRING .)
    RBRACKET        reduce using rule 78 (factor -> STRING .)
    TO              reduce using rule 78 (factor -> STRING .)
    DOWNTO          reduce using rule 78 (factor -> STRING .)


state 46

    (84) factor -> NOT . factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    factor                         shift and go to state 87

state 47

    (12) variable_declaration -> VAR variable_list . SEMICOLON
    (15) variable_list -> variable_list . SEMICOLON variable

    SEMICOLON       shift and go to state 88


state 48

    (16) variable_list -> variable .

    SEMICOLON       reduce using rule 16 (variable_list -> variable .)


state 49

    (17) variable -> id_list . COLON type
    (4) id_list -> id_list . COMMA ID

    COLON           shift and go to state 89
    COMMA           shift and go to state 90


state 50

    (5) id_list -> ID .

    COLON           reduce using rule 5 (id_list -> ID .)
    COMMA           reduce using rule 5 (id_list -> ID .)
    RPAREN          reduce using rule 5 (id_list -> ID .)


state 51

    (13) function_declaration -> FUNCTION ID . parameter_list COLON type SEMICOLON block SEMICOLON
    (38) parameter_list -> . LPAREN parameter_section_list RPAREN
    (39) parameter_list -> . empty
    (6) empty -> .

    LPAREN          shift and go to state 92
    COLON           reduce using rule 6 (empty -> .)

    parameter_list                 shift and go to state 91
    empty                          shift and go to state 93

state 52

    (14) procedure_declaration -> PROCEDURE ID . parameter_list SEMICOLON block SEMICOLON
    (38) parameter_list -> . LPAREN parameter_section_list RPAREN
    (39) parameter_list -> . empty
    (6) empty -> .

    LPAREN          shift and go to state 92
    SEMICOLON       reduce using rule 6 (empty -> .)

    parameter_list                 shift and go to state 94
    empty                          shift and go to state 93

state 53

    (2) header -> PROGRAM ID LPAREN id_list . RPAREN SEMICOLON
    (4) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 95
    COMMA           shift and go to state 90


state 54

    (44) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 44 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 44 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 44 (compound_statement -> BEGIN statement_list END .)
    UNTIL           reduce using rule 44 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 44 (compound_statement -> BEGIN statement_list END .)


state 55

    (45) statement_list -> statement_list SEMICOLON . statement
    (47) statement -> . assignment_statement
    (48) statement -> . expression
    (49) statement -> . compound_statement
    (50) statement -> . io_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . ID ASSIGN expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (44) compound_statement -> . BEGIN statement_list END
    (88) io_statement -> . WRITE LPAREN expression_list RPAREN
    (89) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (90) io_statement -> . READ LPAREN expression_list RPAREN
    (91) io_statement -> . READLN LPAREN expression_list RPAREN
    (92) if_statement -> . IF expression THEN statement ELSE statement
    (93) if_statement -> . IF expression THEN statement
    (94) while_statement -> . WHILE expression DO statement
    (95) repeat_statement -> . REPEAT statement_list UNTIL expression
    (96) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (97) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    ID              shift and go to state 30
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 32
    WRITELN         shift and go to state 34
    READ            shift and go to state 35
    READLN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    REPEAT          shift and go to state 39
    FOR             shift and go to state 40
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    statement                      shift and go to state 96
    assignment_statement           shift and go to state 21
    expression                     shift and go to state 22
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    repeat_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    empty                          shift and go to state 29
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 56

    (58) expression -> expression EQUALS . additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    additive_expression            shift and go to state 97
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 57

    (59) expression -> expression NE . additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    additive_expression            shift and go to state 98
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 58

    (60) expression -> expression LT . additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    additive_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 59

    (61) expression -> expression GT . additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    additive_expression            shift and go to state 100
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 60

    (62) expression -> expression LE . additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    additive_expression            shift and go to state 101
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 61

    (63) expression -> expression GE . additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    additive_expression            shift and go to state 102
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 62

    (64) expression -> expression IN . additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    additive_expression            shift and go to state 103
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 63

    (56) assignment_statement -> ID ASSIGN . expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 104
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 64

    (82) factor -> ID LPAREN . expression_list RPAREN
    (85) expression_list -> . expression_list COMMA expression
    (86) expression_list -> . expression
    (87) expression_list -> . empty
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    RPAREN          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression_list                shift and go to state 105
    expression                     shift and go to state 106
    empty                          shift and go to state 107
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 65

    (66) additive_expression -> additive_expression PLUS . multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    multiplicative_expression      shift and go to state 108
    factor                         shift and go to state 43

state 66

    (67) additive_expression -> additive_expression MINUS . multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    multiplicative_expression      shift and go to state 109
    factor                         shift and go to state 43

state 67

    (68) additive_expression -> additive_expression OR . multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    multiplicative_expression      shift and go to state 110
    factor                         shift and go to state 43

state 68

    (69) additive_expression -> additive_expression ORELSE . multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    multiplicative_expression      shift and go to state 111
    factor                         shift and go to state 43

state 69

    (88) io_statement -> WRITE LPAREN . expression_list RPAREN
    (85) expression_list -> . expression_list COMMA expression
    (86) expression_list -> . expression
    (87) expression_list -> . empty
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    RPAREN          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression_list                shift and go to state 112
    expression                     shift and go to state 106
    empty                          shift and go to state 107
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 70

    (80) factor -> LPAREN expression . RPAREN
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    RPAREN          shift and go to state 113
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 71

    (79) factor -> ID .
    (82) factor -> ID . LPAREN expression_list RPAREN

    LBRACKET        reduce using rule 79 (factor -> ID .)
    TIMES           reduce using rule 79 (factor -> ID .)
    DIVIDE          reduce using rule 79 (factor -> ID .)
    DIV             reduce using rule 79 (factor -> ID .)
    MOD             reduce using rule 79 (factor -> ID .)
    AND             reduce using rule 79 (factor -> ID .)
    ANDTHEN         reduce using rule 79 (factor -> ID .)
    PLUS            reduce using rule 79 (factor -> ID .)
    MINUS           reduce using rule 79 (factor -> ID .)
    OR              reduce using rule 79 (factor -> ID .)
    ORELSE          reduce using rule 79 (factor -> ID .)
    RPAREN          reduce using rule 79 (factor -> ID .)
    EQUALS          reduce using rule 79 (factor -> ID .)
    NE              reduce using rule 79 (factor -> ID .)
    LT              reduce using rule 79 (factor -> ID .)
    GT              reduce using rule 79 (factor -> ID .)
    LE              reduce using rule 79 (factor -> ID .)
    GE              reduce using rule 79 (factor -> ID .)
    IN              reduce using rule 79 (factor -> ID .)
    THEN            reduce using rule 79 (factor -> ID .)
    DO              reduce using rule 79 (factor -> ID .)
    END             reduce using rule 79 (factor -> ID .)
    SEMICOLON       reduce using rule 79 (factor -> ID .)
    UNTIL           reduce using rule 79 (factor -> ID .)
    ELSE            reduce using rule 79 (factor -> ID .)
    COMMA           reduce using rule 79 (factor -> ID .)
    RBRACKET        reduce using rule 79 (factor -> ID .)
    TO              reduce using rule 79 (factor -> ID .)
    DOWNTO          reduce using rule 79 (factor -> ID .)
    LPAREN          shift and go to state 64


state 72

    (89) io_statement -> WRITELN LPAREN . expression_list RPAREN
    (85) expression_list -> . expression_list COMMA expression
    (86) expression_list -> . expression
    (87) expression_list -> . empty
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    RPAREN          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression_list                shift and go to state 114
    expression                     shift and go to state 106
    empty                          shift and go to state 107
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 73

    (90) io_statement -> READ LPAREN . expression_list RPAREN
    (85) expression_list -> . expression_list COMMA expression
    (86) expression_list -> . expression
    (87) expression_list -> . empty
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    RPAREN          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression_list                shift and go to state 115
    expression                     shift and go to state 106
    empty                          shift and go to state 107
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 74

    (91) io_statement -> READLN LPAREN . expression_list RPAREN
    (85) expression_list -> . expression_list COMMA expression
    (86) expression_list -> . expression
    (87) expression_list -> . empty
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    RPAREN          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression_list                shift and go to state 116
    expression                     shift and go to state 106
    empty                          shift and go to state 107
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 75

    (92) if_statement -> IF expression . THEN statement ELSE statement
    (93) if_statement -> IF expression . THEN statement
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    THEN            shift and go to state 117
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 76

    (94) while_statement -> WHILE expression . DO statement
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    DO              shift and go to state 118
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 77

    (95) repeat_statement -> REPEAT statement_list . UNTIL expression
    (45) statement_list -> statement_list . SEMICOLON statement

    UNTIL           shift and go to state 119
    SEMICOLON       shift and go to state 55


state 78

    (96) for_statement -> FOR ID . ASSIGN expression TO expression DO statement
    (97) for_statement -> FOR ID . ASSIGN expression DOWNTO expression DO statement

    ASSIGN          shift and go to state 120


state 79

    (71) multiplicative_expression -> multiplicative_expression TIMES . factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    factor                         shift and go to state 121

state 80

    (72) multiplicative_expression -> multiplicative_expression DIVIDE . factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    factor                         shift and go to state 122

state 81

    (73) multiplicative_expression -> multiplicative_expression DIV . factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    factor                         shift and go to state 123

state 82

    (74) multiplicative_expression -> multiplicative_expression MOD . factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    factor                         shift and go to state 124

state 83

    (75) multiplicative_expression -> multiplicative_expression AND . factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    factor                         shift and go to state 125

state 84

    (76) multiplicative_expression -> multiplicative_expression ANDTHEN . factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    factor                         shift and go to state 126

state 85

    (83) factor -> MINUS factor .
    (81) factor -> factor . LBRACKET expression RBRACKET

    LBRACKET        reduce using rule 83 (factor -> MINUS factor .)
    TIMES           reduce using rule 83 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 83 (factor -> MINUS factor .)
    DIV             reduce using rule 83 (factor -> MINUS factor .)
    MOD             reduce using rule 83 (factor -> MINUS factor .)
    AND             reduce using rule 83 (factor -> MINUS factor .)
    ANDTHEN         reduce using rule 83 (factor -> MINUS factor .)
    PLUS            reduce using rule 83 (factor -> MINUS factor .)
    MINUS           reduce using rule 83 (factor -> MINUS factor .)
    OR              reduce using rule 83 (factor -> MINUS factor .)
    ORELSE          reduce using rule 83 (factor -> MINUS factor .)
    EQUALS          reduce using rule 83 (factor -> MINUS factor .)
    NE              reduce using rule 83 (factor -> MINUS factor .)
    LT              reduce using rule 83 (factor -> MINUS factor .)
    GT              reduce using rule 83 (factor -> MINUS factor .)
    LE              reduce using rule 83 (factor -> MINUS factor .)
    GE              reduce using rule 83 (factor -> MINUS factor .)
    IN              reduce using rule 83 (factor -> MINUS factor .)
    END             reduce using rule 83 (factor -> MINUS factor .)
    SEMICOLON       reduce using rule 83 (factor -> MINUS factor .)
    RPAREN          reduce using rule 83 (factor -> MINUS factor .)
    THEN            reduce using rule 83 (factor -> MINUS factor .)
    DO              reduce using rule 83 (factor -> MINUS factor .)
    UNTIL           reduce using rule 83 (factor -> MINUS factor .)
    ELSE            reduce using rule 83 (factor -> MINUS factor .)
    COMMA           reduce using rule 83 (factor -> MINUS factor .)
    RBRACKET        reduce using rule 83 (factor -> MINUS factor .)
    TO              reduce using rule 83 (factor -> MINUS factor .)
    DOWNTO          reduce using rule 83 (factor -> MINUS factor .)

  ! LBRACKET        [ shift and go to state 86 ]


state 86

    (81) factor -> factor LBRACKET . expression RBRACKET
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    factor                         shift and go to state 43
    expression                     shift and go to state 127
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41

state 87

    (84) factor -> NOT factor .
    (81) factor -> factor . LBRACKET expression RBRACKET

    LBRACKET        reduce using rule 84 (factor -> NOT factor .)
    TIMES           reduce using rule 84 (factor -> NOT factor .)
    DIVIDE          reduce using rule 84 (factor -> NOT factor .)
    DIV             reduce using rule 84 (factor -> NOT factor .)
    MOD             reduce using rule 84 (factor -> NOT factor .)
    AND             reduce using rule 84 (factor -> NOT factor .)
    ANDTHEN         reduce using rule 84 (factor -> NOT factor .)
    PLUS            reduce using rule 84 (factor -> NOT factor .)
    MINUS           reduce using rule 84 (factor -> NOT factor .)
    OR              reduce using rule 84 (factor -> NOT factor .)
    ORELSE          reduce using rule 84 (factor -> NOT factor .)
    EQUALS          reduce using rule 84 (factor -> NOT factor .)
    NE              reduce using rule 84 (factor -> NOT factor .)
    LT              reduce using rule 84 (factor -> NOT factor .)
    GT              reduce using rule 84 (factor -> NOT factor .)
    LE              reduce using rule 84 (factor -> NOT factor .)
    GE              reduce using rule 84 (factor -> NOT factor .)
    IN              reduce using rule 84 (factor -> NOT factor .)
    END             reduce using rule 84 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 84 (factor -> NOT factor .)
    RPAREN          reduce using rule 84 (factor -> NOT factor .)
    THEN            reduce using rule 84 (factor -> NOT factor .)
    DO              reduce using rule 84 (factor -> NOT factor .)
    UNTIL           reduce using rule 84 (factor -> NOT factor .)
    ELSE            reduce using rule 84 (factor -> NOT factor .)
    COMMA           reduce using rule 84 (factor -> NOT factor .)
    RBRACKET        reduce using rule 84 (factor -> NOT factor .)
    TO              reduce using rule 84 (factor -> NOT factor .)
    DOWNTO          reduce using rule 84 (factor -> NOT factor .)

  ! LBRACKET        [ shift and go to state 86 ]


state 88

    (12) variable_declaration -> VAR variable_list SEMICOLON .
    (15) variable_list -> variable_list SEMICOLON . variable
    (17) variable -> . id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    BEGIN           reduce using rule 12 (variable_declaration -> VAR variable_list SEMICOLON .)
    VAR             reduce using rule 12 (variable_declaration -> VAR variable_list SEMICOLON .)
    FUNCTION        reduce using rule 12 (variable_declaration -> VAR variable_list SEMICOLON .)
    PROCEDURE       reduce using rule 12 (variable_declaration -> VAR variable_list SEMICOLON .)
    ID              shift and go to state 50

    variable                       shift and go to state 128
    id_list                        shift and go to state 49

state 89

    (17) variable -> id_list COLON . type
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . EXTENDED
    (30) type -> . COMP
    (31) type -> . CURRENCY
    (32) type -> . STRING
    (33) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type
    (34) type -> . RECORD field_list END

    ID              shift and go to state 130
    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    CHAR            shift and go to state 134
    BYTE            shift and go to state 135
    WORD            shift and go to state 136
    LONGINT         shift and go to state 137
    SHORTINT        shift and go to state 138
    SINGLE          shift and go to state 139
    DOUBLE          shift and go to state 140
    EXTENDED        shift and go to state 141
    COMP            shift and go to state 142
    CURRENCY        shift and go to state 143
    STRING          shift and go to state 144
    ARRAY           shift and go to state 145
    RECORD          shift and go to state 146

    type                           shift and go to state 129

state 90

    (4) id_list -> id_list COMMA . ID

    ID              shift and go to state 147


state 91

    (13) function_declaration -> FUNCTION ID parameter_list . COLON type SEMICOLON block SEMICOLON

    COLON           shift and go to state 148


state 92

    (38) parameter_list -> LPAREN . parameter_section_list RPAREN
    (40) parameter_section_list -> . parameter_section_list SEMICOLON parameter_section
    (41) parameter_section_list -> . parameter_section
    (42) parameter_section -> . id_list COLON type
    (43) parameter_section -> . VAR id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    VAR             shift and go to state 152
    ID              shift and go to state 50

    parameter_section_list         shift and go to state 149
    parameter_section              shift and go to state 150
    id_list                        shift and go to state 151

state 93

    (39) parameter_list -> empty .

    COLON           reduce using rule 39 (parameter_list -> empty .)
    SEMICOLON       reduce using rule 39 (parameter_list -> empty .)


state 94

    (14) procedure_declaration -> PROCEDURE ID parameter_list . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 153


state 95

    (2) header -> PROGRAM ID LPAREN id_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 154


state 96

    (45) statement_list -> statement_list SEMICOLON statement .

    END             reduce using rule 45 (statement_list -> statement_list SEMICOLON statement .)
    SEMICOLON       reduce using rule 45 (statement_list -> statement_list SEMICOLON statement .)
    UNTIL           reduce using rule 45 (statement_list -> statement_list SEMICOLON statement .)


state 97

    (58) expression -> expression EQUALS additive_expression .
    (66) additive_expression -> additive_expression . PLUS multiplicative_expression
    (67) additive_expression -> additive_expression . MINUS multiplicative_expression
    (68) additive_expression -> additive_expression . OR multiplicative_expression
    (69) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    NE              reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    LT              reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    GT              reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    LE              reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    GE              reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    IN              reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    END             reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    RPAREN          reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    THEN            reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    DO              reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    UNTIL           reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    ELSE            reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    COMMA           reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    RBRACKET        reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    TO              reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    DOWNTO          reduce using rule 58 (expression -> expression EQUALS additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 98

    (59) expression -> expression NE additive_expression .
    (66) additive_expression -> additive_expression . PLUS multiplicative_expression
    (67) additive_expression -> additive_expression . MINUS multiplicative_expression
    (68) additive_expression -> additive_expression . OR multiplicative_expression
    (69) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 59 (expression -> expression NE additive_expression .)
    NE              reduce using rule 59 (expression -> expression NE additive_expression .)
    LT              reduce using rule 59 (expression -> expression NE additive_expression .)
    GT              reduce using rule 59 (expression -> expression NE additive_expression .)
    LE              reduce using rule 59 (expression -> expression NE additive_expression .)
    GE              reduce using rule 59 (expression -> expression NE additive_expression .)
    IN              reduce using rule 59 (expression -> expression NE additive_expression .)
    END             reduce using rule 59 (expression -> expression NE additive_expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression NE additive_expression .)
    RPAREN          reduce using rule 59 (expression -> expression NE additive_expression .)
    THEN            reduce using rule 59 (expression -> expression NE additive_expression .)
    DO              reduce using rule 59 (expression -> expression NE additive_expression .)
    UNTIL           reduce using rule 59 (expression -> expression NE additive_expression .)
    ELSE            reduce using rule 59 (expression -> expression NE additive_expression .)
    COMMA           reduce using rule 59 (expression -> expression NE additive_expression .)
    RBRACKET        reduce using rule 59 (expression -> expression NE additive_expression .)
    TO              reduce using rule 59 (expression -> expression NE additive_expression .)
    DOWNTO          reduce using rule 59 (expression -> expression NE additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 99

    (60) expression -> expression LT additive_expression .
    (66) additive_expression -> additive_expression . PLUS multiplicative_expression
    (67) additive_expression -> additive_expression . MINUS multiplicative_expression
    (68) additive_expression -> additive_expression . OR multiplicative_expression
    (69) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 60 (expression -> expression LT additive_expression .)
    NE              reduce using rule 60 (expression -> expression LT additive_expression .)
    LT              reduce using rule 60 (expression -> expression LT additive_expression .)
    GT              reduce using rule 60 (expression -> expression LT additive_expression .)
    LE              reduce using rule 60 (expression -> expression LT additive_expression .)
    GE              reduce using rule 60 (expression -> expression LT additive_expression .)
    IN              reduce using rule 60 (expression -> expression LT additive_expression .)
    END             reduce using rule 60 (expression -> expression LT additive_expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression LT additive_expression .)
    RPAREN          reduce using rule 60 (expression -> expression LT additive_expression .)
    THEN            reduce using rule 60 (expression -> expression LT additive_expression .)
    DO              reduce using rule 60 (expression -> expression LT additive_expression .)
    UNTIL           reduce using rule 60 (expression -> expression LT additive_expression .)
    ELSE            reduce using rule 60 (expression -> expression LT additive_expression .)
    COMMA           reduce using rule 60 (expression -> expression LT additive_expression .)
    RBRACKET        reduce using rule 60 (expression -> expression LT additive_expression .)
    TO              reduce using rule 60 (expression -> expression LT additive_expression .)
    DOWNTO          reduce using rule 60 (expression -> expression LT additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 100

    (61) expression -> expression GT additive_expression .
    (66) additive_expression -> additive_expression . PLUS multiplicative_expression
    (67) additive_expression -> additive_expression . MINUS multiplicative_expression
    (68) additive_expression -> additive_expression . OR multiplicative_expression
    (69) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 61 (expression -> expression GT additive_expression .)
    NE              reduce using rule 61 (expression -> expression GT additive_expression .)
    LT              reduce using rule 61 (expression -> expression GT additive_expression .)
    GT              reduce using rule 61 (expression -> expression GT additive_expression .)
    LE              reduce using rule 61 (expression -> expression GT additive_expression .)
    GE              reduce using rule 61 (expression -> expression GT additive_expression .)
    IN              reduce using rule 61 (expression -> expression GT additive_expression .)
    END             reduce using rule 61 (expression -> expression GT additive_expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression GT additive_expression .)
    RPAREN          reduce using rule 61 (expression -> expression GT additive_expression .)
    THEN            reduce using rule 61 (expression -> expression GT additive_expression .)
    DO              reduce using rule 61 (expression -> expression GT additive_expression .)
    UNTIL           reduce using rule 61 (expression -> expression GT additive_expression .)
    ELSE            reduce using rule 61 (expression -> expression GT additive_expression .)
    COMMA           reduce using rule 61 (expression -> expression GT additive_expression .)
    RBRACKET        reduce using rule 61 (expression -> expression GT additive_expression .)
    TO              reduce using rule 61 (expression -> expression GT additive_expression .)
    DOWNTO          reduce using rule 61 (expression -> expression GT additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 101

    (62) expression -> expression LE additive_expression .
    (66) additive_expression -> additive_expression . PLUS multiplicative_expression
    (67) additive_expression -> additive_expression . MINUS multiplicative_expression
    (68) additive_expression -> additive_expression . OR multiplicative_expression
    (69) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 62 (expression -> expression LE additive_expression .)
    NE              reduce using rule 62 (expression -> expression LE additive_expression .)
    LT              reduce using rule 62 (expression -> expression LE additive_expression .)
    GT              reduce using rule 62 (expression -> expression LE additive_expression .)
    LE              reduce using rule 62 (expression -> expression LE additive_expression .)
    GE              reduce using rule 62 (expression -> expression LE additive_expression .)
    IN              reduce using rule 62 (expression -> expression LE additive_expression .)
    END             reduce using rule 62 (expression -> expression LE additive_expression .)
    SEMICOLON       reduce using rule 62 (expression -> expression LE additive_expression .)
    RPAREN          reduce using rule 62 (expression -> expression LE additive_expression .)
    THEN            reduce using rule 62 (expression -> expression LE additive_expression .)
    DO              reduce using rule 62 (expression -> expression LE additive_expression .)
    UNTIL           reduce using rule 62 (expression -> expression LE additive_expression .)
    ELSE            reduce using rule 62 (expression -> expression LE additive_expression .)
    COMMA           reduce using rule 62 (expression -> expression LE additive_expression .)
    RBRACKET        reduce using rule 62 (expression -> expression LE additive_expression .)
    TO              reduce using rule 62 (expression -> expression LE additive_expression .)
    DOWNTO          reduce using rule 62 (expression -> expression LE additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 102

    (63) expression -> expression GE additive_expression .
    (66) additive_expression -> additive_expression . PLUS multiplicative_expression
    (67) additive_expression -> additive_expression . MINUS multiplicative_expression
    (68) additive_expression -> additive_expression . OR multiplicative_expression
    (69) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 63 (expression -> expression GE additive_expression .)
    NE              reduce using rule 63 (expression -> expression GE additive_expression .)
    LT              reduce using rule 63 (expression -> expression GE additive_expression .)
    GT              reduce using rule 63 (expression -> expression GE additive_expression .)
    LE              reduce using rule 63 (expression -> expression GE additive_expression .)
    GE              reduce using rule 63 (expression -> expression GE additive_expression .)
    IN              reduce using rule 63 (expression -> expression GE additive_expression .)
    END             reduce using rule 63 (expression -> expression GE additive_expression .)
    SEMICOLON       reduce using rule 63 (expression -> expression GE additive_expression .)
    RPAREN          reduce using rule 63 (expression -> expression GE additive_expression .)
    THEN            reduce using rule 63 (expression -> expression GE additive_expression .)
    DO              reduce using rule 63 (expression -> expression GE additive_expression .)
    UNTIL           reduce using rule 63 (expression -> expression GE additive_expression .)
    ELSE            reduce using rule 63 (expression -> expression GE additive_expression .)
    COMMA           reduce using rule 63 (expression -> expression GE additive_expression .)
    RBRACKET        reduce using rule 63 (expression -> expression GE additive_expression .)
    TO              reduce using rule 63 (expression -> expression GE additive_expression .)
    DOWNTO          reduce using rule 63 (expression -> expression GE additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 103

    (64) expression -> expression IN additive_expression .
    (66) additive_expression -> additive_expression . PLUS multiplicative_expression
    (67) additive_expression -> additive_expression . MINUS multiplicative_expression
    (68) additive_expression -> additive_expression . OR multiplicative_expression
    (69) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 64 (expression -> expression IN additive_expression .)
    NE              reduce using rule 64 (expression -> expression IN additive_expression .)
    LT              reduce using rule 64 (expression -> expression IN additive_expression .)
    GT              reduce using rule 64 (expression -> expression IN additive_expression .)
    LE              reduce using rule 64 (expression -> expression IN additive_expression .)
    GE              reduce using rule 64 (expression -> expression IN additive_expression .)
    IN              reduce using rule 64 (expression -> expression IN additive_expression .)
    END             reduce using rule 64 (expression -> expression IN additive_expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression IN additive_expression .)
    RPAREN          reduce using rule 64 (expression -> expression IN additive_expression .)
    THEN            reduce using rule 64 (expression -> expression IN additive_expression .)
    DO              reduce using rule 64 (expression -> expression IN additive_expression .)
    UNTIL           reduce using rule 64 (expression -> expression IN additive_expression .)
    ELSE            reduce using rule 64 (expression -> expression IN additive_expression .)
    COMMA           reduce using rule 64 (expression -> expression IN additive_expression .)
    RBRACKET        reduce using rule 64 (expression -> expression IN additive_expression .)
    TO              reduce using rule 64 (expression -> expression IN additive_expression .)
    DOWNTO          reduce using rule 64 (expression -> expression IN additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 104

    (56) assignment_statement -> ID ASSIGN expression .
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    END             reduce using rule 56 (assignment_statement -> ID ASSIGN expression .)
    SEMICOLON       reduce using rule 56 (assignment_statement -> ID ASSIGN expression .)
    UNTIL           reduce using rule 56 (assignment_statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 56 (assignment_statement -> ID ASSIGN expression .)
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 105

    (82) factor -> ID LPAREN expression_list . RPAREN
    (85) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 155
    COMMA           shift and go to state 156


state 106

    (86) expression_list -> expression .
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    RPAREN          reduce using rule 86 (expression_list -> expression .)
    COMMA           reduce using rule 86 (expression_list -> expression .)
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 107

    (87) expression_list -> empty .

    RPAREN          reduce using rule 87 (expression_list -> empty .)
    COMMA           reduce using rule 87 (expression_list -> empty .)


state 108

    (66) additive_expression -> additive_expression PLUS multiplicative_expression .
    (71) multiplicative_expression -> multiplicative_expression . TIMES factor
    (72) multiplicative_expression -> multiplicative_expression . DIVIDE factor
    (73) multiplicative_expression -> multiplicative_expression . DIV factor
    (74) multiplicative_expression -> multiplicative_expression . MOD factor
    (75) multiplicative_expression -> multiplicative_expression . AND factor
    (76) multiplicative_expression -> multiplicative_expression . ANDTHEN factor

    PLUS            reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ORELSE          reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUALS          reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IN              reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    END             reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    THEN            reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DO              reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNTIL           reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TO              reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOWNTO          reduce using rule 66 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    DIV             shift and go to state 81
    MOD             shift and go to state 82
    AND             shift and go to state 83
    ANDTHEN         shift and go to state 84


state 109

    (67) additive_expression -> additive_expression MINUS multiplicative_expression .
    (71) multiplicative_expression -> multiplicative_expression . TIMES factor
    (72) multiplicative_expression -> multiplicative_expression . DIVIDE factor
    (73) multiplicative_expression -> multiplicative_expression . DIV factor
    (74) multiplicative_expression -> multiplicative_expression . MOD factor
    (75) multiplicative_expression -> multiplicative_expression . AND factor
    (76) multiplicative_expression -> multiplicative_expression . ANDTHEN factor

    PLUS            reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ORELSE          reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUALS          reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IN              reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    END             reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    THEN            reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DO              reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNTIL           reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TO              reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOWNTO          reduce using rule 67 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    DIV             shift and go to state 81
    MOD             shift and go to state 82
    AND             shift and go to state 83
    ANDTHEN         shift and go to state 84


state 110

    (68) additive_expression -> additive_expression OR multiplicative_expression .
    (71) multiplicative_expression -> multiplicative_expression . TIMES factor
    (72) multiplicative_expression -> multiplicative_expression . DIVIDE factor
    (73) multiplicative_expression -> multiplicative_expression . DIV factor
    (74) multiplicative_expression -> multiplicative_expression . MOD factor
    (75) multiplicative_expression -> multiplicative_expression . AND factor
    (76) multiplicative_expression -> multiplicative_expression . ANDTHEN factor

    PLUS            reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    MINUS           reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    OR              reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    ORELSE          reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    EQUALS          reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    NE              reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    LT              reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    GT              reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    LE              reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    GE              reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    IN              reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    END             reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    SEMICOLON       reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    RPAREN          reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    THEN            reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    DO              reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    UNTIL           reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    ELSE            reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    COMMA           reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    RBRACKET        reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    TO              reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    DOWNTO          reduce using rule 68 (additive_expression -> additive_expression OR multiplicative_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    DIV             shift and go to state 81
    MOD             shift and go to state 82
    AND             shift and go to state 83
    ANDTHEN         shift and go to state 84


state 111

    (69) additive_expression -> additive_expression ORELSE multiplicative_expression .
    (71) multiplicative_expression -> multiplicative_expression . TIMES factor
    (72) multiplicative_expression -> multiplicative_expression . DIVIDE factor
    (73) multiplicative_expression -> multiplicative_expression . DIV factor
    (74) multiplicative_expression -> multiplicative_expression . MOD factor
    (75) multiplicative_expression -> multiplicative_expression . AND factor
    (76) multiplicative_expression -> multiplicative_expression . ANDTHEN factor

    PLUS            reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    MINUS           reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    OR              reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    ORELSE          reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    EQUALS          reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    NE              reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    LT              reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    GT              reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    LE              reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    GE              reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    IN              reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    END             reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    SEMICOLON       reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    RPAREN          reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    THEN            reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    DO              reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    UNTIL           reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    ELSE            reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    COMMA           reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    RBRACKET        reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    TO              reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    DOWNTO          reduce using rule 69 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80
    DIV             shift and go to state 81
    MOD             shift and go to state 82
    AND             shift and go to state 83
    ANDTHEN         shift and go to state 84


state 112

    (88) io_statement -> WRITE LPAREN expression_list . RPAREN
    (85) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 157
    COMMA           shift and go to state 156


state 113

    (80) factor -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    ANDTHEN         reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    ORELSE          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 80 (factor -> LPAREN expression RPAREN .)


state 114

    (89) io_statement -> WRITELN LPAREN expression_list . RPAREN
    (85) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 158
    COMMA           shift and go to state 156


state 115

    (90) io_statement -> READ LPAREN expression_list . RPAREN
    (85) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 159
    COMMA           shift and go to state 156


state 116

    (91) io_statement -> READLN LPAREN expression_list . RPAREN
    (85) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 156


state 117

    (92) if_statement -> IF expression THEN . statement ELSE statement
    (93) if_statement -> IF expression THEN . statement
    (47) statement -> . assignment_statement
    (48) statement -> . expression
    (49) statement -> . compound_statement
    (50) statement -> . io_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . ID ASSIGN expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (44) compound_statement -> . BEGIN statement_list END
    (88) io_statement -> . WRITE LPAREN expression_list RPAREN
    (89) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (90) io_statement -> . READ LPAREN expression_list RPAREN
    (91) io_statement -> . READLN LPAREN expression_list RPAREN
    (92) if_statement -> . IF expression THEN statement ELSE statement
    (93) if_statement -> . IF expression THEN statement
    (94) while_statement -> . WHILE expression DO statement
    (95) repeat_statement -> . REPEAT statement_list UNTIL expression
    (96) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (97) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    ID              shift and go to state 30
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 32
    WRITELN         shift and go to state 34
    READ            shift and go to state 35
    READLN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    REPEAT          shift and go to state 39
    FOR             shift and go to state 40
    ELSE            reduce using rule 6 (empty -> .)
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 22
    statement                      shift and go to state 161
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    repeat_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    empty                          shift and go to state 29
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 118

    (94) while_statement -> WHILE expression DO . statement
    (47) statement -> . assignment_statement
    (48) statement -> . expression
    (49) statement -> . compound_statement
    (50) statement -> . io_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . ID ASSIGN expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (44) compound_statement -> . BEGIN statement_list END
    (88) io_statement -> . WRITE LPAREN expression_list RPAREN
    (89) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (90) io_statement -> . READ LPAREN expression_list RPAREN
    (91) io_statement -> . READLN LPAREN expression_list RPAREN
    (92) if_statement -> . IF expression THEN statement ELSE statement
    (93) if_statement -> . IF expression THEN statement
    (94) while_statement -> . WHILE expression DO statement
    (95) repeat_statement -> . REPEAT statement_list UNTIL expression
    (96) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (97) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    ID              shift and go to state 30
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 32
    WRITELN         shift and go to state 34
    READ            shift and go to state 35
    READLN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    REPEAT          shift and go to state 39
    FOR             shift and go to state 40
    ELSE            reduce using rule 6 (empty -> .)
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 22
    statement                      shift and go to state 162
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    repeat_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    empty                          shift and go to state 29
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 119

    (95) repeat_statement -> REPEAT statement_list UNTIL . expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 163
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 120

    (96) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (97) for_statement -> FOR ID ASSIGN . expression DOWNTO expression DO statement
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 164
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 121

    (71) multiplicative_expression -> multiplicative_expression TIMES factor .
    (81) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    DIVIDE          reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    DIV             reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    MOD             reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    AND             reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    ANDTHEN         reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    PLUS            reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    MINUS           reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    OR              reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    ORELSE          reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    EQUALS          reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    NE              reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    LT              reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    GT              reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    LE              reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    GE              reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    IN              reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    END             reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    SEMICOLON       reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    RPAREN          reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    THEN            reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    DO              reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    UNTIL           reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    ELSE            reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    COMMA           reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    RBRACKET        reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    TO              reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    DOWNTO          reduce using rule 71 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    LBRACKET        shift and go to state 86


state 122

    (72) multiplicative_expression -> multiplicative_expression DIVIDE factor .
    (81) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    DIVIDE          reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    DIV             reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    MOD             reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    AND             reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    ANDTHEN         reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    PLUS            reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    MINUS           reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    OR              reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    ORELSE          reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    EQUALS          reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    NE              reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    LT              reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    GT              reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    LE              reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    GE              reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    IN              reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    END             reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    SEMICOLON       reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    RPAREN          reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    THEN            reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    DO              reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    UNTIL           reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    ELSE            reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    COMMA           reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    RBRACKET        reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    TO              reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    DOWNTO          reduce using rule 72 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    LBRACKET        shift and go to state 86


state 123

    (73) multiplicative_expression -> multiplicative_expression DIV factor .
    (81) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    DIVIDE          reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    DIV             reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    MOD             reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    AND             reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    ANDTHEN         reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    PLUS            reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    MINUS           reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    OR              reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    ORELSE          reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    EQUALS          reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    NE              reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    LT              reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    GT              reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    LE              reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    GE              reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    IN              reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    END             reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    SEMICOLON       reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    RPAREN          reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    THEN            reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    DO              reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    UNTIL           reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    ELSE            reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    COMMA           reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    RBRACKET        reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    TO              reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    DOWNTO          reduce using rule 73 (multiplicative_expression -> multiplicative_expression DIV factor .)
    LBRACKET        shift and go to state 86


state 124

    (74) multiplicative_expression -> multiplicative_expression MOD factor .
    (81) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    DIVIDE          reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    DIV             reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    MOD             reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    AND             reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    ANDTHEN         reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    PLUS            reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    MINUS           reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    OR              reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    ORELSE          reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    EQUALS          reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    NE              reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    LT              reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    GT              reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    LE              reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    GE              reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    IN              reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    END             reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    SEMICOLON       reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    RPAREN          reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    THEN            reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    DO              reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    UNTIL           reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    ELSE            reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    COMMA           reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    RBRACKET        reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    TO              reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    DOWNTO          reduce using rule 74 (multiplicative_expression -> multiplicative_expression MOD factor .)
    LBRACKET        shift and go to state 86


state 125

    (75) multiplicative_expression -> multiplicative_expression AND factor .
    (81) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    DIVIDE          reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    DIV             reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    MOD             reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    AND             reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    ANDTHEN         reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    PLUS            reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    MINUS           reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    OR              reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    ORELSE          reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    EQUALS          reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    NE              reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    LT              reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    GT              reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    LE              reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    GE              reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    IN              reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    END             reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    SEMICOLON       reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    RPAREN          reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    THEN            reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    DO              reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    UNTIL           reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    ELSE            reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    COMMA           reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    RBRACKET        reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    TO              reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    DOWNTO          reduce using rule 75 (multiplicative_expression -> multiplicative_expression AND factor .)
    LBRACKET        shift and go to state 86


state 126

    (76) multiplicative_expression -> multiplicative_expression ANDTHEN factor .
    (81) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    DIVIDE          reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    DIV             reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    MOD             reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    AND             reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    ANDTHEN         reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    PLUS            reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    MINUS           reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    OR              reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    ORELSE          reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    EQUALS          reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    NE              reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    LT              reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    GT              reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    LE              reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    GE              reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    IN              reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    END             reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    SEMICOLON       reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    RPAREN          reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    THEN            reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    DO              reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    UNTIL           reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    ELSE            reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    COMMA           reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    RBRACKET        reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    TO              reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    DOWNTO          reduce using rule 76 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    LBRACKET        shift and go to state 86


state 127

    (81) factor -> factor LBRACKET expression . RBRACKET
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    RBRACKET        shift and go to state 165
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 128

    (15) variable_list -> variable_list SEMICOLON variable .

    SEMICOLON       reduce using rule 15 (variable_list -> variable_list SEMICOLON variable .)


state 129

    (17) variable -> id_list COLON type .

    SEMICOLON       reduce using rule 17 (variable -> id_list COLON type .)


state 130

    (18) type -> ID .

    SEMICOLON       reduce using rule 18 (type -> ID .)
    RPAREN          reduce using rule 18 (type -> ID .)
    END             reduce using rule 18 (type -> ID .)


state 131

    (19) type -> INTEGER .

    SEMICOLON       reduce using rule 19 (type -> INTEGER .)
    RPAREN          reduce using rule 19 (type -> INTEGER .)
    END             reduce using rule 19 (type -> INTEGER .)


state 132

    (20) type -> REAL .

    SEMICOLON       reduce using rule 20 (type -> REAL .)
    RPAREN          reduce using rule 20 (type -> REAL .)
    END             reduce using rule 20 (type -> REAL .)


state 133

    (21) type -> BOOLEAN .

    SEMICOLON       reduce using rule 21 (type -> BOOLEAN .)
    RPAREN          reduce using rule 21 (type -> BOOLEAN .)
    END             reduce using rule 21 (type -> BOOLEAN .)


state 134

    (22) type -> CHAR .

    SEMICOLON       reduce using rule 22 (type -> CHAR .)
    RPAREN          reduce using rule 22 (type -> CHAR .)
    END             reduce using rule 22 (type -> CHAR .)


state 135

    (23) type -> BYTE .

    SEMICOLON       reduce using rule 23 (type -> BYTE .)
    RPAREN          reduce using rule 23 (type -> BYTE .)
    END             reduce using rule 23 (type -> BYTE .)


state 136

    (24) type -> WORD .

    SEMICOLON       reduce using rule 24 (type -> WORD .)
    RPAREN          reduce using rule 24 (type -> WORD .)
    END             reduce using rule 24 (type -> WORD .)


state 137

    (25) type -> LONGINT .

    SEMICOLON       reduce using rule 25 (type -> LONGINT .)
    RPAREN          reduce using rule 25 (type -> LONGINT .)
    END             reduce using rule 25 (type -> LONGINT .)


state 138

    (26) type -> SHORTINT .

    SEMICOLON       reduce using rule 26 (type -> SHORTINT .)
    RPAREN          reduce using rule 26 (type -> SHORTINT .)
    END             reduce using rule 26 (type -> SHORTINT .)


state 139

    (27) type -> SINGLE .

    SEMICOLON       reduce using rule 27 (type -> SINGLE .)
    RPAREN          reduce using rule 27 (type -> SINGLE .)
    END             reduce using rule 27 (type -> SINGLE .)


state 140

    (28) type -> DOUBLE .

    SEMICOLON       reduce using rule 28 (type -> DOUBLE .)
    RPAREN          reduce using rule 28 (type -> DOUBLE .)
    END             reduce using rule 28 (type -> DOUBLE .)


state 141

    (29) type -> EXTENDED .

    SEMICOLON       reduce using rule 29 (type -> EXTENDED .)
    RPAREN          reduce using rule 29 (type -> EXTENDED .)
    END             reduce using rule 29 (type -> EXTENDED .)


state 142

    (30) type -> COMP .

    SEMICOLON       reduce using rule 30 (type -> COMP .)
    RPAREN          reduce using rule 30 (type -> COMP .)
    END             reduce using rule 30 (type -> COMP .)


state 143

    (31) type -> CURRENCY .

    SEMICOLON       reduce using rule 31 (type -> CURRENCY .)
    RPAREN          reduce using rule 31 (type -> CURRENCY .)
    END             reduce using rule 31 (type -> CURRENCY .)


state 144

    (32) type -> STRING .

    SEMICOLON       reduce using rule 32 (type -> STRING .)
    RPAREN          reduce using rule 32 (type -> STRING .)
    END             reduce using rule 32 (type -> STRING .)


state 145

    (33) type -> ARRAY . LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type

    LBRACKET        shift and go to state 166


state 146

    (34) type -> RECORD . field_list END
    (35) field_list -> . field_list SEMICOLON field
    (36) field_list -> . field
    (37) field -> . id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    ID              shift and go to state 50

    field_list                     shift and go to state 167
    field                          shift and go to state 168
    id_list                        shift and go to state 169

state 147

    (4) id_list -> id_list COMMA ID .

    COLON           reduce using rule 4 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 4 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 4 (id_list -> id_list COMMA ID .)


state 148

    (13) function_declaration -> FUNCTION ID parameter_list COLON . type SEMICOLON block SEMICOLON
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . EXTENDED
    (30) type -> . COMP
    (31) type -> . CURRENCY
    (32) type -> . STRING
    (33) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type
    (34) type -> . RECORD field_list END

    ID              shift and go to state 130
    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    CHAR            shift and go to state 134
    BYTE            shift and go to state 135
    WORD            shift and go to state 136
    LONGINT         shift and go to state 137
    SHORTINT        shift and go to state 138
    SINGLE          shift and go to state 139
    DOUBLE          shift and go to state 140
    EXTENDED        shift and go to state 141
    COMP            shift and go to state 142
    CURRENCY        shift and go to state 143
    STRING          shift and go to state 144
    ARRAY           shift and go to state 145
    RECORD          shift and go to state 146

    type                           shift and go to state 170

state 149

    (38) parameter_list -> LPAREN parameter_section_list . RPAREN
    (40) parameter_section_list -> parameter_section_list . SEMICOLON parameter_section

    RPAREN          shift and go to state 171
    SEMICOLON       shift and go to state 172


state 150

    (41) parameter_section_list -> parameter_section .

    RPAREN          reduce using rule 41 (parameter_section_list -> parameter_section .)
    SEMICOLON       reduce using rule 41 (parameter_section_list -> parameter_section .)


state 151

    (42) parameter_section -> id_list . COLON type
    (4) id_list -> id_list . COMMA ID

    COLON           shift and go to state 173
    COMMA           shift and go to state 90


state 152

    (43) parameter_section -> VAR . id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    ID              shift and go to state 50

    id_list                        shift and go to state 174

state 153

    (14) procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON . block SEMICOLON
    (7) block -> . declarations compound_statement
    (8) declarations -> . declarations variable_declaration
    (9) declarations -> . declarations function_declaration
    (10) declarations -> . declarations procedure_declaration
    (11) declarations -> . empty
    (6) empty -> .

    BEGIN           reduce using rule 6 (empty -> .)
    VAR             reduce using rule 6 (empty -> .)
    FUNCTION        reduce using rule 6 (empty -> .)
    PROCEDURE       reduce using rule 6 (empty -> .)

    block                          shift and go to state 175
    declarations                   shift and go to state 5
    empty                          shift and go to state 6

state 154

    (2) header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON .

    BEGIN           reduce using rule 2 (header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON .)
    VAR             reduce using rule 2 (header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 2 (header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 2 (header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON .)


state 155

    (82) factor -> ID LPAREN expression_list RPAREN .

    LBRACKET        reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    TIMES           reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    ANDTHEN         reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    ORELSE          reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    EQUALS          reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    NE              reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    LT              reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    GT              reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    LE              reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    GE              reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 82 (factor -> ID LPAREN expression_list RPAREN .)


state 156

    (85) expression_list -> expression_list COMMA . expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 176
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 157

    (88) io_statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 88 (io_statement -> WRITE LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 88 (io_statement -> WRITE LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 88 (io_statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 88 (io_statement -> WRITE LPAREN expression_list RPAREN .)


state 158

    (89) io_statement -> WRITELN LPAREN expression_list RPAREN .

    END             reduce using rule 89 (io_statement -> WRITELN LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 89 (io_statement -> WRITELN LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 89 (io_statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 89 (io_statement -> WRITELN LPAREN expression_list RPAREN .)


state 159

    (90) io_statement -> READ LPAREN expression_list RPAREN .

    END             reduce using rule 90 (io_statement -> READ LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 90 (io_statement -> READ LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 90 (io_statement -> READ LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 90 (io_statement -> READ LPAREN expression_list RPAREN .)


state 160

    (91) io_statement -> READLN LPAREN expression_list RPAREN .

    END             reduce using rule 91 (io_statement -> READLN LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 91 (io_statement -> READLN LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 91 (io_statement -> READLN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 91 (io_statement -> READLN LPAREN expression_list RPAREN .)


state 161

    (92) if_statement -> IF expression THEN statement . ELSE statement
    (93) if_statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 177
    END             reduce using rule 93 (if_statement -> IF expression THEN statement .)
    SEMICOLON       reduce using rule 93 (if_statement -> IF expression THEN statement .)
    UNTIL           reduce using rule 93 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 93 (if_statement -> IF expression THEN statement .) ]


state 162

    (94) while_statement -> WHILE expression DO statement .

    END             reduce using rule 94 (while_statement -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 94 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 94 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 94 (while_statement -> WHILE expression DO statement .)


state 163

    (95) repeat_statement -> REPEAT statement_list UNTIL expression .
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    END             reduce using rule 95 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    SEMICOLON       reduce using rule 95 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    UNTIL           reduce using rule 95 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    ELSE            reduce using rule 95 (repeat_statement -> REPEAT statement_list UNTIL expression .)
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 164

    (96) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (97) for_statement -> FOR ID ASSIGN expression . DOWNTO expression DO statement
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    TO              shift and go to state 178
    DOWNTO          shift and go to state 179
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 165

    (81) factor -> factor LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    DIV             reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    MOD             reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    AND             reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    ANDTHEN         reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    OR              reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    ORELSE          reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    NE              reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    LT              reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    GT              reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    LE              reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    GE              reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    IN              reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    END             reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    THEN            reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    DO              reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    UNTIL           reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    TO              reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 81 (factor -> factor LBRACKET expression RBRACKET .)


state 166

    (33) type -> ARRAY LBRACKET . NUMBER DOT DOT NUMBER RBRACKET OF type

    NUMBER          shift and go to state 180


state 167

    (34) type -> RECORD field_list . END
    (35) field_list -> field_list . SEMICOLON field

    END             shift and go to state 181
    SEMICOLON       shift and go to state 182


state 168

    (36) field_list -> field .

    END             reduce using rule 36 (field_list -> field .)
    SEMICOLON       reduce using rule 36 (field_list -> field .)


state 169

    (37) field -> id_list . COLON type
    (4) id_list -> id_list . COMMA ID

    COLON           shift and go to state 183
    COMMA           shift and go to state 90


state 170

    (13) function_declaration -> FUNCTION ID parameter_list COLON type . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 184


state 171

    (38) parameter_list -> LPAREN parameter_section_list RPAREN .

    COLON           reduce using rule 38 (parameter_list -> LPAREN parameter_section_list RPAREN .)
    SEMICOLON       reduce using rule 38 (parameter_list -> LPAREN parameter_section_list RPAREN .)


state 172

    (40) parameter_section_list -> parameter_section_list SEMICOLON . parameter_section
    (42) parameter_section -> . id_list COLON type
    (43) parameter_section -> . VAR id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    VAR             shift and go to state 152
    ID              shift and go to state 50

    parameter_section              shift and go to state 185
    id_list                        shift and go to state 151

state 173

    (42) parameter_section -> id_list COLON . type
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . EXTENDED
    (30) type -> . COMP
    (31) type -> . CURRENCY
    (32) type -> . STRING
    (33) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type
    (34) type -> . RECORD field_list END

    ID              shift and go to state 130
    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    CHAR            shift and go to state 134
    BYTE            shift and go to state 135
    WORD            shift and go to state 136
    LONGINT         shift and go to state 137
    SHORTINT        shift and go to state 138
    SINGLE          shift and go to state 139
    DOUBLE          shift and go to state 140
    EXTENDED        shift and go to state 141
    COMP            shift and go to state 142
    CURRENCY        shift and go to state 143
    STRING          shift and go to state 144
    ARRAY           shift and go to state 145
    RECORD          shift and go to state 146

    type                           shift and go to state 186

state 174

    (43) parameter_section -> VAR id_list . COLON type
    (4) id_list -> id_list . COMMA ID

    COLON           shift and go to state 187
    COMMA           shift and go to state 90


state 175

    (14) procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 188


state 176

    (85) expression_list -> expression_list COMMA expression .
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    RPAREN          reduce using rule 85 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 85 (expression_list -> expression_list COMMA expression .)
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 177

    (92) if_statement -> IF expression THEN statement ELSE . statement
    (47) statement -> . assignment_statement
    (48) statement -> . expression
    (49) statement -> . compound_statement
    (50) statement -> . io_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . ID ASSIGN expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (44) compound_statement -> . BEGIN statement_list END
    (88) io_statement -> . WRITE LPAREN expression_list RPAREN
    (89) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (90) io_statement -> . READ LPAREN expression_list RPAREN
    (91) io_statement -> . READLN LPAREN expression_list RPAREN
    (92) if_statement -> . IF expression THEN statement ELSE statement
    (93) if_statement -> . IF expression THEN statement
    (94) while_statement -> . WHILE expression DO statement
    (95) repeat_statement -> . REPEAT statement_list UNTIL expression
    (96) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (97) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    ID              shift and go to state 30
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 32
    WRITELN         shift and go to state 34
    READ            shift and go to state 35
    READLN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    REPEAT          shift and go to state 39
    FOR             shift and go to state 40
    ELSE            reduce using rule 6 (empty -> .)
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 22
    statement                      shift and go to state 189
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    repeat_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    empty                          shift and go to state 29
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 178

    (96) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 190
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 179

    (97) for_statement -> FOR ID ASSIGN expression DOWNTO . expression DO statement
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    ID              shift and go to state 71
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 191
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 180

    (33) type -> ARRAY LBRACKET NUMBER . DOT DOT NUMBER RBRACKET OF type

    DOT             shift and go to state 192


state 181

    (34) type -> RECORD field_list END .

    SEMICOLON       reduce using rule 34 (type -> RECORD field_list END .)
    RPAREN          reduce using rule 34 (type -> RECORD field_list END .)
    END             reduce using rule 34 (type -> RECORD field_list END .)


state 182

    (35) field_list -> field_list SEMICOLON . field
    (37) field -> . id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    ID              shift and go to state 50

    field                          shift and go to state 193
    id_list                        shift and go to state 169

state 183

    (37) field -> id_list COLON . type
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . EXTENDED
    (30) type -> . COMP
    (31) type -> . CURRENCY
    (32) type -> . STRING
    (33) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type
    (34) type -> . RECORD field_list END

    ID              shift and go to state 130
    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    CHAR            shift and go to state 134
    BYTE            shift and go to state 135
    WORD            shift and go to state 136
    LONGINT         shift and go to state 137
    SHORTINT        shift and go to state 138
    SINGLE          shift and go to state 139
    DOUBLE          shift and go to state 140
    EXTENDED        shift and go to state 141
    COMP            shift and go to state 142
    CURRENCY        shift and go to state 143
    STRING          shift and go to state 144
    ARRAY           shift and go to state 145
    RECORD          shift and go to state 146

    type                           shift and go to state 194

state 184

    (13) function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON . block SEMICOLON
    (7) block -> . declarations compound_statement
    (8) declarations -> . declarations variable_declaration
    (9) declarations -> . declarations function_declaration
    (10) declarations -> . declarations procedure_declaration
    (11) declarations -> . empty
    (6) empty -> .

    BEGIN           reduce using rule 6 (empty -> .)
    VAR             reduce using rule 6 (empty -> .)
    FUNCTION        reduce using rule 6 (empty -> .)
    PROCEDURE       reduce using rule 6 (empty -> .)

    block                          shift and go to state 195
    declarations                   shift and go to state 5
    empty                          shift and go to state 6

state 185

    (40) parameter_section_list -> parameter_section_list SEMICOLON parameter_section .

    RPAREN          reduce using rule 40 (parameter_section_list -> parameter_section_list SEMICOLON parameter_section .)
    SEMICOLON       reduce using rule 40 (parameter_section_list -> parameter_section_list SEMICOLON parameter_section .)


state 186

    (42) parameter_section -> id_list COLON type .

    RPAREN          reduce using rule 42 (parameter_section -> id_list COLON type .)
    SEMICOLON       reduce using rule 42 (parameter_section -> id_list COLON type .)


state 187

    (43) parameter_section -> VAR id_list COLON . type
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . EXTENDED
    (30) type -> . COMP
    (31) type -> . CURRENCY
    (32) type -> . STRING
    (33) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type
    (34) type -> . RECORD field_list END

    ID              shift and go to state 130
    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    CHAR            shift and go to state 134
    BYTE            shift and go to state 135
    WORD            shift and go to state 136
    LONGINT         shift and go to state 137
    SHORTINT        shift and go to state 138
    SINGLE          shift and go to state 139
    DOUBLE          shift and go to state 140
    EXTENDED        shift and go to state 141
    COMP            shift and go to state 142
    CURRENCY        shift and go to state 143
    STRING          shift and go to state 144
    ARRAY           shift and go to state 145
    RECORD          shift and go to state 146

    type                           shift and go to state 196

state 188

    (14) procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON .

    BEGIN           reduce using rule 14 (procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 14 (procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 14 (procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 14 (procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON .)


state 189

    (92) if_statement -> IF expression THEN statement ELSE statement .

    END             reduce using rule 92 (if_statement -> IF expression THEN statement ELSE statement .)
    SEMICOLON       reduce using rule 92 (if_statement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 92 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 92 (if_statement -> IF expression THEN statement ELSE statement .)


state 190

    (96) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    DO              shift and go to state 197
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 191

    (97) for_statement -> FOR ID ASSIGN expression DOWNTO expression . DO statement
    (58) expression -> expression . EQUALS additive_expression
    (59) expression -> expression . NE additive_expression
    (60) expression -> expression . LT additive_expression
    (61) expression -> expression . GT additive_expression
    (62) expression -> expression . LE additive_expression
    (63) expression -> expression . GE additive_expression
    (64) expression -> expression . IN additive_expression

    DO              shift and go to state 198
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 192

    (33) type -> ARRAY LBRACKET NUMBER DOT . DOT NUMBER RBRACKET OF type

    DOT             shift and go to state 199


state 193

    (35) field_list -> field_list SEMICOLON field .

    END             reduce using rule 35 (field_list -> field_list SEMICOLON field .)
    SEMICOLON       reduce using rule 35 (field_list -> field_list SEMICOLON field .)


state 194

    (37) field -> id_list COLON type .

    END             reduce using rule 37 (field -> id_list COLON type .)
    SEMICOLON       reduce using rule 37 (field -> id_list COLON type .)


state 195

    (13) function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 200


state 196

    (43) parameter_section -> VAR id_list COLON type .

    RPAREN          reduce using rule 43 (parameter_section -> VAR id_list COLON type .)
    SEMICOLON       reduce using rule 43 (parameter_section -> VAR id_list COLON type .)


state 197

    (96) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (47) statement -> . assignment_statement
    (48) statement -> . expression
    (49) statement -> . compound_statement
    (50) statement -> . io_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . ID ASSIGN expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (44) compound_statement -> . BEGIN statement_list END
    (88) io_statement -> . WRITE LPAREN expression_list RPAREN
    (89) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (90) io_statement -> . READ LPAREN expression_list RPAREN
    (91) io_statement -> . READLN LPAREN expression_list RPAREN
    (92) if_statement -> . IF expression THEN statement ELSE statement
    (93) if_statement -> . IF expression THEN statement
    (94) while_statement -> . WHILE expression DO statement
    (95) repeat_statement -> . REPEAT statement_list UNTIL expression
    (96) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (97) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    ID              shift and go to state 30
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 32
    WRITELN         shift and go to state 34
    READ            shift and go to state 35
    READLN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    REPEAT          shift and go to state 39
    FOR             shift and go to state 40
    ELSE            reduce using rule 6 (empty -> .)
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 22
    statement                      shift and go to state 201
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    repeat_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    empty                          shift and go to state 29
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 198

    (97) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO . statement
    (47) statement -> . assignment_statement
    (48) statement -> . expression
    (49) statement -> . compound_statement
    (50) statement -> . io_statement
    (51) statement -> . if_statement
    (52) statement -> . while_statement
    (53) statement -> . repeat_statement
    (54) statement -> . for_statement
    (55) statement -> . empty
    (56) assignment_statement -> . ID ASSIGN expression
    (57) expression -> . additive_expression
    (58) expression -> . expression EQUALS additive_expression
    (59) expression -> . expression NE additive_expression
    (60) expression -> . expression LT additive_expression
    (61) expression -> . expression GT additive_expression
    (62) expression -> . expression LE additive_expression
    (63) expression -> . expression GE additive_expression
    (64) expression -> . expression IN additive_expression
    (44) compound_statement -> . BEGIN statement_list END
    (88) io_statement -> . WRITE LPAREN expression_list RPAREN
    (89) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (90) io_statement -> . READ LPAREN expression_list RPAREN
    (91) io_statement -> . READLN LPAREN expression_list RPAREN
    (92) if_statement -> . IF expression THEN statement ELSE statement
    (93) if_statement -> . IF expression THEN statement
    (94) while_statement -> . WHILE expression DO statement
    (95) repeat_statement -> . REPEAT statement_list UNTIL expression
    (96) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (97) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (65) additive_expression -> . multiplicative_expression
    (66) additive_expression -> . additive_expression PLUS multiplicative_expression
    (67) additive_expression -> . additive_expression MINUS multiplicative_expression
    (68) additive_expression -> . additive_expression OR multiplicative_expression
    (69) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (70) multiplicative_expression -> . factor
    (71) multiplicative_expression -> . multiplicative_expression TIMES factor
    (72) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (73) multiplicative_expression -> . multiplicative_expression DIV factor
    (74) multiplicative_expression -> . multiplicative_expression MOD factor
    (75) multiplicative_expression -> . multiplicative_expression AND factor
    (76) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (77) factor -> . NUMBER
    (78) factor -> . STRING
    (79) factor -> . ID
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . factor LBRACKET expression RBRACKET
    (82) factor -> . ID LPAREN expression_list RPAREN
    (83) factor -> . MINUS factor
    (84) factor -> . NOT factor

    ID              shift and go to state 30
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 32
    WRITELN         shift and go to state 34
    READ            shift and go to state 35
    READLN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    REPEAT          shift and go to state 39
    FOR             shift and go to state 40
    ELSE            reduce using rule 6 (empty -> .)
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    UNTIL           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    LPAREN          shift and go to state 33
    MINUS           shift and go to state 42
    NOT             shift and go to state 46

    expression                     shift and go to state 22
    statement                      shift and go to state 202
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    repeat_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    empty                          shift and go to state 29
    additive_expression            shift and go to state 31
    multiplicative_expression      shift and go to state 41
    factor                         shift and go to state 43

state 199

    (33) type -> ARRAY LBRACKET NUMBER DOT DOT . NUMBER RBRACKET OF type

    NUMBER          shift and go to state 203


state 200

    (13) function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON .

    BEGIN           reduce using rule 13 (function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 13 (function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 13 (function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 13 (function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON .)


state 201

    (96) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 96 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMICOLON       reduce using rule 96 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    UNTIL           reduce using rule 96 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 96 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 202

    (97) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .

    END             reduce using rule 97 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    SEMICOLON       reduce using rule 97 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    UNTIL           reduce using rule 97 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 97 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)


state 203

    (33) type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER . RBRACKET OF type

    RBRACKET        shift and go to state 204


state 204

    (33) type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET . OF type

    OF              shift and go to state 205


state 205

    (33) type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF . type
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . EXTENDED
    (30) type -> . COMP
    (31) type -> . CURRENCY
    (32) type -> . STRING
    (33) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type
    (34) type -> . RECORD field_list END

    ID              shift and go to state 130
    INTEGER         shift and go to state 131
    REAL            shift and go to state 132
    BOOLEAN         shift and go to state 133
    CHAR            shift and go to state 134
    BYTE            shift and go to state 135
    WORD            shift and go to state 136
    LONGINT         shift and go to state 137
    SHORTINT        shift and go to state 138
    SINGLE          shift and go to state 139
    DOUBLE          shift and go to state 140
    EXTENDED        shift and go to state 141
    COMP            shift and go to state 142
    CURRENCY        shift and go to state 143
    STRING          shift and go to state 144
    ARRAY           shift and go to state 145
    RECORD          shift and go to state 146

    type                           shift and go to state 206

state 206

    (33) type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type .

    SEMICOLON       reduce using rule 33 (type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type .)
    RPAREN          reduce using rule 33 (type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type .)
    END             reduce using rule 33 (type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 161 resolved as shift
