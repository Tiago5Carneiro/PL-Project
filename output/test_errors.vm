    PUSHI 0 // Initial stack value for global 'a' (gp[0])
    PUSHI 0 // Initial stack value for global 'b' (gp[1])
    PUSHI 0 // Initial stack value for global 'c' (gp[2])
    PUSHI 0 // Initial stack value for global 'd' (gp[3])
    PUSHI 0 // Initial stack value for global 'e' (gp[4])
    PUSHN 10 // Reserve space for global array 'arr' (gp[5..])
    START // Initialize Frame Pointer = Stack Pointer
    PUSHI 5
    STOREG 0 // Store to global variable 'a'
    PUSHS "Hello"
    STOREG 1 // Store to global variable 'b'
    PUSHG 0 // Push global 'a'
    PUSHF 2.5
    FADD
    STOREG 2 // Store to global variable 'c'
    PUSHGP // Push GP for global array 'arr' base address
    PUSHI 5 // Offset of global array 'arr'
    PADD // Calculate base address of global array 'arr'
    PUSHI 5
    PUSHI 1 // Push array lower bound 1
    SUB // Adjust index to be 0-based for VM
    LOADN // Load value from array element
    STOREG 3 // Store to global variable 'd'
    PUSHGP // Push GP for global array 'arr' base address
    PUSHI 5 // Offset of global array 'arr'
    PADD // Calculate base address of global array 'arr'
    PUSHI 11
    PUSHI 1 // Push array lower bound 1
    SUB // Adjust index to be 0-based for VM
    LOADN // Load value from array element
    STOREG 4 // Store to global variable 'e'
    PUSHG 0 // Push global 'a'
    WRITEI
    PUSHG 1 // Push global 'b'
    WRITES
    WRITELN
    PUSHG 2 // Push global 'c'
    WRITEF
    PUSHG 3 // Push global 'd'
    WRITEI
    PUSHG 4 // Push global 'e'
    WRITEI
    WRITELN
    PUSHG 0 // Push global 'a'
    WRITEI
    PUSHG 1 // Push global 'b'
    WRITES
    PUSHG 2 // Push global 'c'
    WRITEF
    PUSHG 3 // Push global 'd'
    WRITEI
    WRITELN
    STOP // End of program
